# Generated by Django 3.1.3 on 2021-08-11 03:07

import ckeditor.fields
import ckeditor_uploader.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('marketplace', '0026_auto_20210811_0028'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField()),
                ('posted_datetime', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('upvote_count', models.PositiveIntegerField(default=0)),
                ('downvote_count', models.PositiveIntegerField(default=0)),
                ('poster', models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='academic_answers', related_query_name='academic_answer', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Academic Question Answer',
                'verbose_name_plural': 'Academic Question Answers',
            },
        ),
        migrations.CreateModel(
            name='AcademicQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=250)),
                ('posted_datetime', models.DateTimeField(auto_now_add=True)),
                ('upvote_count', models.PositiveIntegerField(default=0)),
                ('downvote_count', models.PositiveIntegerField(default=0)),
                ('bookmarkers', models.ManyToManyField(related_name='bookmarked_academic_questions', related_query_name='bookmarked_academic_question', to=settings.AUTH_USER_MODEL)),
                ('followers', models.ManyToManyField(related_name='following_academic_questions', related_query_name='following_academic_question', to=settings.AUTH_USER_MODEL)),
                ('poster', models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='academic_questions', related_query_name='academic_question', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Academic Question',
                'verbose_name_plural': 'Academic Questions',
            },
        ),
        migrations.CreateModel(
            name='SchoolAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField()),
                ('posted_datetime', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('upvote_count', models.PositiveIntegerField(default=0)),
                ('downvote_count', models.PositiveIntegerField(default=0)),
                ('poster', models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='school_answers', related_query_name='school_answer', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'School Question Answer',
                'verbose_name_plural': 'School Question Answers',
            },
        ),
        migrations.CreateModel(
            name='SchoolQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=250)),
                ('posted_datetime', models.DateTimeField(auto_now_add=True)),
                ('upvote_count', models.PositiveIntegerField(default=0)),
                ('downvote_count', models.PositiveIntegerField(default=0)),
                ('bookmarkers', models.ManyToManyField(related_name='bookmarked_school_questions', related_query_name='bookmarked_school_question', to=settings.AUTH_USER_MODEL)),
                ('followers', models.ManyToManyField(related_name='following_school_questions', related_query_name='following_school_question', to=settings.AUTH_USER_MODEL)),
                ('poster', models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='school_questions', related_query_name='school_question', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', related_query_name='question', to='marketplace.institution')),
            ],
            options={
                'verbose_name': 'School Question',
                'verbose_name_plural': 'School Questions',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
                ('slug', models.SlugField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolQuestionComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('posted_datetime', models.DateTimeField(auto_now_add=True)),
                ('content', ckeditor.fields.RichTextField()),
                ('vote_count', models.PositiveIntegerField(default=0)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('poster', models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='school_question_comments', related_query_name='school_question_comment', to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comment', to='qa_site.schoolquestion')),
            ],
            options={
                'verbose_name': 'School Question Comment',
                'verbose_name_plural': 'School Question Comments',
            },
        ),
        migrations.CreateModel(
            name='SchoolAnswerComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('posted_datetime', models.DateTimeField(auto_now_add=True)),
                ('content', ckeditor.fields.RichTextField()),
                ('vote_count', models.PositiveIntegerField(default=0)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comment', to='qa_site.schoolanswer')),
                ('poster', models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='school_answer_comments', related_query_name='school_answer_comment', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'School Answer Comment',
                'verbose_name_plural': 'School Answer Comments',
            },
        ),
        migrations.AddField(
            model_name='schoolanswer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', related_query_name='answer', to='qa_site.schoolquestion'),
        ),
        migrations.CreateModel(
            name='AcademicQuestionComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('posted_datetime', models.DateTimeField(auto_now_add=True)),
                ('content', ckeditor.fields.RichTextField()),
                ('vote_count', models.PositiveIntegerField(default=0)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('poster', models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='academic_question_comments', related_query_name='academic_question_comment', to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comment', to='qa_site.academicquestion')),
            ],
            options={
                'verbose_name': 'Academic Question Comment',
                'verbose_name_plural': 'Academic Question Comments',
            },
        ),
        migrations.CreateModel(
            name='AcademicAnswerComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('posted_datetime', models.DateTimeField(auto_now_add=True)),
                ('content', ckeditor.fields.RichTextField()),
                ('vote_count', models.PositiveIntegerField(default=0)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comment', to='qa_site.academicanswer')),
                ('poster', models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='academic_answer_comments', related_query_name='academic_answer_comment', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Academic Answer Comment',
                'verbose_name_plural': 'Academic Answer Comments',
            },
        ),
        migrations.AddField(
            model_name='academicanswer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', related_query_name='answer', to='qa_site.academicquestion'),
        ),
    ]
