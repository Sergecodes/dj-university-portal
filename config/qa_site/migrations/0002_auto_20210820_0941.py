# Generated by Django 3.1.3 on 2021-08-20 09:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('qa_site', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('marketplace', '0002_auto_20210820_0941'),
        ('taggit', '0004_auto_20210811_2353'),
    ]

    operations = [
        migrations.AddField(
            model_name='schoolquestioncomment',
            name='poster',
            field=models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='school_question_comments', related_query_name='school_question_comment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schoolquestioncomment',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comment', to='qa_site.schoolquestion'),
        ),
        migrations.AddField(
            model_name='schoolquestioncomment',
            name='upvoters',
            field=models.ManyToManyField(blank=True, related_name='upvoted_school_question_comments', related_query_name='upvoted_school_question_comment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schoolquestion',
            name='bookmarkers',
            field=models.ManyToManyField(blank=True, related_name='bookmarked_school_questions', related_query_name='bookmarked_school_question', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schoolquestion',
            name='downvoters',
            field=models.ManyToManyField(blank=True, related_name='downvoted_school_questions', related_query_name='downvoted_school_question', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schoolquestion',
            name='followers',
            field=models.ManyToManyField(blank=True, related_name='following_school_questions', related_query_name='following_school_question', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schoolquestion',
            name='poster',
            field=models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='school_questions', related_query_name='school_question', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schoolquestion',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', related_query_name='question', to='marketplace.institution'),
        ),
        migrations.AddField(
            model_name='schoolquestion',
            name='tags',
            field=models.ManyToManyField(related_name='school_questions', related_query_name='school_question', to='qa_site.SchoolQuestionTag'),
        ),
        migrations.AddField(
            model_name='schoolquestion',
            name='upvoters',
            field=models.ManyToManyField(blank=True, related_name='upvoted_school_questions', related_query_name='upvoted_school_question', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schoolanswercomment',
            name='answer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comment', to='qa_site.schoolanswer'),
        ),
        migrations.AddField(
            model_name='schoolanswercomment',
            name='poster',
            field=models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='school_answer_comments', related_query_name='school_answer_comment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schoolanswercomment',
            name='upvoters',
            field=models.ManyToManyField(blank=True, related_name='upvoted_school_answer_comments', related_query_name='upvoted_school_answer_comment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schoolanswer',
            name='downvoters',
            field=models.ManyToManyField(blank=True, related_name='downvoted_school_answers', related_query_name='downvoted_school_answer', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schoolanswer',
            name='poster',
            field=models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='school_answers', related_query_name='school_answer', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schoolanswer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', related_query_name='answer', to='qa_site.schoolquestion'),
        ),
        migrations.AddField(
            model_name='schoolanswer',
            name='upvoters',
            field=models.ManyToManyField(blank=True, related_name='upvoted_school_answers', related_query_name='upvoted_school_answer', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicquestioncomment',
            name='poster',
            field=models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='academic_question_comments', related_query_name='academic_question_comment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicquestioncomment',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comment', to='qa_site.academicquestion'),
        ),
        migrations.AddField(
            model_name='academicquestioncomment',
            name='upvoters',
            field=models.ManyToManyField(blank=True, related_name='upvoted_academic_question_comments', related_query_name='upvoted_academic_question_comment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicquestion',
            name='bookmarkers',
            field=models.ManyToManyField(blank=True, related_name='bookmarked_academic_questions', related_query_name='bookmarked_academic_question', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicquestion',
            name='downvoters',
            field=models.ManyToManyField(blank=True, related_name='downvoted_academic_questions', related_query_name='downvoted_academic_question', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicquestion',
            name='followers',
            field=models.ManyToManyField(blank=True, related_name='following_academic_questions', related_query_name='following_academic_question', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicquestion',
            name='poster',
            field=models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='academic_questions', related_query_name='academic_question', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicquestion',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='academic_questions', related_query_name='academic_question', to='qa_site.subject'),
        ),
        migrations.AddField(
            model_name='academicquestion',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='academicquestion',
            name='upvoters',
            field=models.ManyToManyField(blank=True, related_name='upvoted_academic_questions', related_query_name='upvoted_academic_question', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicanswercomment',
            name='answer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comment', to='qa_site.academicanswer'),
        ),
        migrations.AddField(
            model_name='academicanswercomment',
            name='poster',
            field=models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='academic_answer_comments', related_query_name='academic_answer_comment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicanswercomment',
            name='upvoters',
            field=models.ManyToManyField(blank=True, related_name='upvoted_academic_answer_comments', related_query_name='upvoted_academic_answer_comment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicanswer',
            name='downvoters',
            field=models.ManyToManyField(blank=True, related_name='downvoted_academic_answers', related_query_name='downvoted_academic_answer', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicanswer',
            name='poster',
            field=models.ForeignKey(on_delete=models.SET(users.models.get_dummy_user), related_name='academic_answers', related_query_name='academic_answer', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicanswer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', related_query_name='answer', to='qa_site.academicquestion'),
        ),
        migrations.AddField(
            model_name='academicanswer',
            name='upvoters',
            field=models.ManyToManyField(blank=True, related_name='upvoted_academic_answers', related_query_name='upvoted_academic_answer', to=settings.AUTH_USER_MODEL),
        ),
    ]
