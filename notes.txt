
source /home/sergeman/.virtualenvs/univ-portal-env/bin/activate

# export GOOGLE_APPLICATION_CREDENTIALS='/home/sergeman/Downloads/camerschools-demo-c99628e30d95.json'

COLOUR PALETTE:
	Green: #198754
	Purple: #3956B2
	Yellow: #F5C118

freeprivacypolicy.com  (cool)


NEXT 5 TASKS:
- redirect to previous page upon logout
- if user is authed, on header, change profile icon to his profile image. 
- after 24hrs, votes can't be recalled.

*** next TASKS
- validate uploaded past paper file type
- update dashboard page. is concept of points still valid ?
- count number of downloads for past paper(download_count field) .. ajax on download button click
- screen overlay or loading stuff when ajax request is called (e.g. when a thread is voted) jquery blockUI: https://jquery.malsup.com/block/
- use ajax for username select ... 
- validate birth date (year) in social profile; user should be above 15 ... ?. eg.ages below 15 should be rejected.. ??
- change full name validator (frontend nd backend)
- enable unique username (collation)
- fix bookmarking section in social profile 
- add through models (follow, bookmark, upvote, downvote) then add datetime fields
- restrict length of text fields... (also in models; eg via clean method)
- in listing update and creation forms, first verify via js that contact numbers count is ok. also, if form contains errors, move page to the error section... 
- add attractive and pleasant modal when new users visit the site(homepage) for their first time.
- display "some users" aside on mobile too.
- highlight each occurrence of keywords in search results page.


MAYBE MAYBE NOT
- update taggit-selectize. should not call backend upon typing every letter!!
- after uploading image in listing pages, there should be an eye icon on it. 
upon which clicking should enlarge the image...
- on social profile create form, interested relationship should be multiple select (multiple values should be permitted). (update models, displaying & filtering accordingly)
- editing and creating a new item(that supports photos) pollutes the photos. (since session uses same key for updates and creations) (i don't think it's a big problem lol)



;;;
- create another thumbnail alias for small photos. this one will be used with small photos such that their size doesn't add. 
ex. in the current implementation, a photo with resolution(200 x 80) will generate a thumbnail with higher resolution and hence heavier. 
Use a thumbnail alias 'small_photo_thumb' and perform a size check during photo upload, perhaps from 1MB and below should use this alias,
better still check the width and height of the image... (maybe sum of W and H)


- add google attribution template var(should_attribute) to context via view so as to limit reduce code, etc... 
- enable translation for question tags ?, past paper comments(change model and translation.py too) and comments in qa_site; display google translate image attribute for jquery comments(discuss/academic comment)
- on question detail page, enable ordering answers (by date posted, votes, etc..); on listing pages, enable ordering (by date too..)
- cached property (with ttl) package is a must ! especially for complex computations.(in future)
- remove duration from listings for now right... perhaps implement in future. yep. {you can also add the field expiry_datetime to each post (listing) then when saving, set this field to creation_datetime + ... (in short see how it's implemented in lost_or_found models.); and add repost(relist) button near posts older than x days (to implement this, we can delete the previous post then create the new post... or redirect user to update page then add a field last_reposted_on ... idk).}
- show best users on both pc and mobile; display vertically on mobile.
- vip post(payment), birth day wish (pple with similar birthdays...); more points for answers to vip questions 
- try to set default for slug field in admin 
- checkout bootstrap form validation (especially for ckeditor fields.) - .invalid-feedback, etc..
- make the element a[name='top'] have a class and attach an event to it so it should be usable  through out the site
- add sorting by price and date in item listing page like jumia and myschool


TIPS & IDEAS:
- check if past paper is unique upon posting... ? if possible .
- eventually students projects. support for ranking too
- create some examples (e.g. example of a good question with title body etc..) so students will have an idea of how to create theirs.
- add explanation of how to ask good question...
- test with codecov(codecoverage)
- https://stackoverflow.com/questions/21941503/django-delete-unused-media-files
- jquery validation plugin..
- use font awesome latest version(6.1.1) and properly install https://fontawesome.com/docs/web/use-with/python-django


## redirect to next url.. ; use in class based views.  ###
def get_success_url(self):
	try:
		next = self.request.GET['next']
	except KeyError:
		next = self.success_url
	return next


django-anymail, django-mailer,



on post description, user shouldnt put contact details nor now web links (scam, spam, etc..)
In fact, remove all weblinks from source b4 adding to db..

Item categories example:
categories: video games & consoles, toys & hobbies, sporting goods, musical instruments & gear, jewelry & watches,
		health & beauty,dvds & movies, crafts, dolls, computers;electronics/tablets & networking, cell phones & accessories,
		books,baby,produits Apple
#
		livres, films, jouets;instruments de musique;sport & fitness;bijoux & montres;female clothes, male clothes,
		female shoes,male shoes,maisons a louer,studios & chambres a louer;motos & velos;mobiles & smartphones

Ad categories exampl:
 - job offer, event(e.g. match tomorrow..), internship, 

this site vs jumia:
	- concept of points so as to encourage sellers to signal the site that the item has being bought
		- a certain num of points => a certain privilege e.g. be moderator?(nope..), contact developers,...
		- item sold => +x points to buyer and + y points to seller (x >y)
	- form signed upon item purchase which will serve as a receipt...  (future)
	- users can only perform transaction in  items in univ, hence more security...


# case insensitive collation
from django.contrib.postgres.operations import CreateCollation
from django.db import migrations


class Migration(migrations.Migration):

   initial = True

   operations = [
      CreateCollation(
         'case_insensitive',
         provider='icu',
         locale='und-u-ks-level2',
         deterministic=False
      ),
   ]
    


# how do you do this in db: "you have 10 votes left for today? "
#  nb: Entities: user, Date; Relation: Activity..(num_of_votes, ...)
'''
class User:
	activity_dates = models.ManyToManyField(
		'ActivityDate',
		through='UserActivity',
		related_name='+'  # disable mapping reverse relation (from ActivityDate to User).
		# so no way to do activity_date.user etc.  no need to do this right
	)

	def add_vote(self):
		...
		self.dates.latest
	...

class ActivityDate(models.Model):
	datetime = models.DateTimeField(auto_now_add=True)

class UserActivity(models.Model):
	user = models.ForeignKey(User, on_delete=models.CASCADE)
	activity_date = models.ForeignKey(Date, on_delete=models.CASCADE)

	# Relation fields:
	num_of_votes_left = models.PositiveIntegerField(default=10)


	class Meta:
		# order_with_respect_to = 'activity_date'
		unique_together = [
			('user', 'activity_date'),
		]
	# then a cron job to remove all entries with date < current date
	# from django.utils.timezone import localtime, now
	remove all entries where entry.datetime.date() < timezone.now().date
'''

	'add_academic_comment': {
		'toolbar': 'Custom',
		'toolbar_Custom': [
			['Bold', 'Italic', ],
			['Link', 'Blockquote', 'Image', 'CodeSnippet'],
			['NumberedList', 'BulletedList', 'Format', 'HorizontalRule'],
			# ['Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight'],
			['Undo', 'Redo'],
			['Maximize', 'Preview']
		],
		'tabSpaces': 4,
		'width': 'auto',
		'extraPlugins': 'codesnippet',
		# 'uiColor': '#ff3333',
	},
	