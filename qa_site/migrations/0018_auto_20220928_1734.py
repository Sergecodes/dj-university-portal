# Generated by Django 3.2 on 2022-09-28 17:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('qa_site', '0017_academiccommentphoto_discusscommentphoto'),
    ]

    operations = [
        # Manually deleted tables inj db and renamed AlterField to AddField
        migrations.CreateModel(
            name='DiscussQuestionUpvote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upvote_datetime', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='qa_site.discussquestion')),
                ('upvoter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DiscussQuestionFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follow_datetime', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='qa_site.discussquestion')),
            ],
        ),
        migrations.CreateModel(
            name='DiscussQuestionDownvote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('downvote_datetime', models.DateTimeField(auto_now_add=True)),
                ('downvoter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='qa_site.discussquestion')),
            ],
        ),
        migrations.CreateModel(
            name='DiscussQuestionBookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bookmark_datetime', models.DateTimeField(auto_now_add=True)),
                ('bookmarker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='qa_site.discussquestion')),
            ],
        ),
        migrations.CreateModel(
            name='AcademicQuestionUpvote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upvote_datetime', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='qa_site.academicquestion')),
                ('upvoter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AcademicQuestionFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follow_datetime', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='qa_site.academicquestion')),
            ],
        ),
        migrations.CreateModel(
            name='AcademicQuestionDownvote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('downvote_datetime', models.DateTimeField(auto_now_add=True)),
                ('downvoter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='qa_site.academicquestion')),
            ],
        ),
        migrations.CreateModel(
            name='AcademicQuestionBookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bookmark_datetime', models.DateTimeField(auto_now_add=True)),
                ('bookmarker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='qa_site.academicquestion')),
            ],
        ),
        migrations.AddField(
            model_name='academicquestion',
            name='bookmarkers',
            field=models.ManyToManyField(blank=True, related_name='bookmarked_academic_questions', related_query_name='bookmarked_academic_question', through='qa_site.AcademicQuestionBookmark', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicquestion',
            name='downvoters',
            field=models.ManyToManyField(blank=True, related_name='downvoted_academic_questions', related_query_name='downvoted_academic_question', through='qa_site.AcademicQuestionDownvote', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicquestion',
            name='followers',
            field=models.ManyToManyField(blank=True, related_name='following_academic_questions', related_query_name='following_academic_question', through='qa_site.AcademicQuestionFollow', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='academicquestion',
            name='upvoters',
            field=models.ManyToManyField(blank=True, related_name='upvoted_academic_questions', related_query_name='upvoted_academic_question', through='qa_site.AcademicQuestionUpvote', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='discussquestionupvote',
            constraint=models.UniqueConstraint(fields=('question', 'upvoter'), name='unique_discuss_qstn_upvote'),
        ),
        migrations.AddConstraint(
            model_name='discussquestionfollow',
            constraint=models.UniqueConstraint(fields=('question', 'follower'), name='unique_discuss_qstn_follow'),
        ),
        migrations.AddConstraint(
            model_name='discussquestiondownvote',
            constraint=models.UniqueConstraint(fields=('question', 'downvoter'), name='unique_discuss_qstn_downvote'),
        ),
        migrations.AddConstraint(
            model_name='discussquestionbookmark',
            constraint=models.UniqueConstraint(fields=('question', 'bookmarker'), name='unique_discuss_qstn_bookmark'),
        ),
        migrations.AddConstraint(
            model_name='academicquestionupvote',
            constraint=models.UniqueConstraint(fields=('question', 'upvoter'), name='unique_academic_qstn_upvote'),
        ),
        migrations.AddConstraint(
            model_name='academicquestionfollow',
            constraint=models.UniqueConstraint(fields=('question', 'follower'), name='unique_academic_qstn_follow'),
        ),
        migrations.AddConstraint(
            model_name='academicquestiondownvote',
            constraint=models.UniqueConstraint(fields=('question', 'downvoter'), name='unique_academic_qstn_downvote'),
        ),
        migrations.AddConstraint(
            model_name='academicquestionbookmark',
            constraint=models.UniqueConstraint(fields=('question', 'bookmarker'), name='unique_academic_qstn_bookmark'),
        ),
    ]
